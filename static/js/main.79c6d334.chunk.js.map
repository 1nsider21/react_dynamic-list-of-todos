{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","todos","selectUser","findTodo","filterByCompleted","className","onChange","value","type","placeholder","event","target","map","todo","completed","key","id","checked","readOnly","title","onClick","userId","CurrentUser","name","email","phone","onClear","defaultProps","getTodos","fetch","then","response","json","getUser","App","state","selectedUserId","preparedTodos","user","componentDidMount","a","setState","data","filter","componentDidUpdate","query","includes","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79c6d334.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  findTodo,\n  filterByCompleted,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <select onChange={filterByCompleted}>\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n      <input\n        type=\"text\"\n        placeholder=\"Find todo\"\n        onChange={event => findTodo(event.target.value)}\n      />\n\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'\n            }\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  findTodo: PropTypes.func.isRequired,\n  filterByCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ id, name, email, phone, onClear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        {id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{name}</h3>\n    <p className=\"CurrentUser__email\">{email}</p>\n    <p className=\"CurrentUser__phone\">{phone}</p>\n\n    <button\n      type=\"button\"\n      onClick={onClear}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  onClear: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  id: 0,\n  name: '',\n  email: '',\n  phone: '',\n};\n","const API_TODOS = 'https://mate-api.herokuapp.com/todos';\nconst API_USERS = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => (\n  fetch(API_TODOS)\n    .then(response => response.json())\n);\n\nexport const getUser = userId => (\n  fetch(`${API_USERS}/${userId}`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    preparedTodos: [],\n    user: [],\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data.filter(todo => todo.userId),\n      preparedTodos: todos.data.filter(todo => todo.userId),\n    });\n  }\n\n  componentDidUpdate = () => {\n    if (this.state.selectedUserId !== 0\n      && this.state.selectedUserId !== this.state.user.id\n      && this.state.selectedUserId) {\n      getUser(this.state.selectedUserId)\n        .then((user) => {\n          if (user.data !== null) {\n            this.setState({ user: user.data });\n          } else {\n            this.setState(state => ({ user: {\n              id: state.selectedUserId,\n              name: 'No name',\n              email: 'No email',\n              phone: 'No phone',\n            } }));\n          }\n        });\n    }\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  onClear = () => {\n    this.setState({\n      user: [],\n      selectedUserId: 0,\n    });\n  }\n\n  findTodo = (query) => {\n    this.setState(state => ({\n      preparedTodos: [...state.todos].filter(todo => (todo.title\n        ? todo.title.includes(query)\n        : '')),\n    }));\n  }\n\n  filterByCompleted = (event) => {\n    switch (event.target.value) {\n      case 'completed':\n        this.setState(state => ({\n          preparedTodos: [...state.todos].filter(todo => todo.completed),\n        }));\n        break;\n      case 'active':\n        this.setState(state => ({\n          preparedTodos: [...state.todos].filter(todo => !todo.completed),\n        }));\n        break;\n      default:\n        this.setState(state => ({\n          preparedTodos: [...state.todos],\n        }));\n    }\n  }\n\n  render() {\n    const { selectedUserId, preparedTodos, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            findTodo={this.findTodo}\n            filterByCompleted={this.filterByCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId && user ? (\n              <CurrentUser\n                {...user}\n                onClear={this.onClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}